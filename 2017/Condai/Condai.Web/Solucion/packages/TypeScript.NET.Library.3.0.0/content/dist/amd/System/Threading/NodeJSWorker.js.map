{"version":3,"sources":["System/Threading/NodeJSWorker.js","System/Threading/NodeJSWorker.ts"],"names":["define","require","exports","ObservableBase_1","ps","NodeJSWorker","_super","url","_this","this","call","process","_process","fork","on","msg","_onNext","JSON","parse","err","_onError","__extends","prototype","data","onmessage","error","onerror","_onDispose","removeAllListeners","kill","postMessage","obj","throwIfDisposed","send","stringify","terminate","dispose","ObservableBase","Object","defineProperty","value"],"mappings":";;;;;AAKAA,QAAQ,UAAW,UAAW,gCAAiC,SAAUC,EAASC,EAASC,GACvF,YCIJ,IAAMC,GAAKH,EAAQ,iBAMnBI,EAAA,SAAAC,GAMC,QAAAD,GAAYE,GANb,GAAAC,GAAAC,IAQEH,GAAAI,KAAAD,KACA,IAAIE,GAAUF,KAAKG,SAAWR,EAAGS,KAAKN,EACtCI,GAAQG,GAAG,UAAW,SAACC,GAAa,MAAAP,GAAKQ,QAAQC,KAAKC,MAAMH,MAC5DJ,EAAQG,GAAG,QAAS,SAACK,GAAU,MAAAX,GAAKY,SAASD,KAqC/C,MAhDkCE,WAAAhB,EAAAC,GAcvBD,EAAAiB,UAAAN,QAAV,SAAkBO,GAEjBjB,EAAAgB,UAAMN,QAAON,KAAAD,KAACc,GACXd,KAAKe,WACPf,KAAKe,WAAWD,KAAMA,KAIdlB,EAAAiB,UAAAF,SAAV,SAAmBK,GAElBnB,EAAAgB,UAAMF,SAAQV,KAAAD,KAACgB,GACZhB,KAAKiB,SACPjB,KAAKiB,QAAQD,IAGLpB,EAAAiB,UAAAK,WAAV,WAECrB,EAAAgB,UAAMK,WAAUjB,KAAAD,MAChBA,KAAKG,SAASgB,qBACdnB,KAAKG,SAASiB,OACdpB,KAAKG,SAAW,MAGjBP,EAAAiB,UAAAQ,YAAA,SAAYC,GAEXtB,KAAKuB,kBACLvB,KAAKG,SAASqB,KAAKhB,KAAKiB,WAAWX,KAAMQ,MAG1C1B,EAAAiB,UAAAa,UAAA,WAEC1B,KAAK2B,WAGP/B,GAhDkCF,EAAAkC,eAArBnC,GAAAG,aAAYA,EAkDzBiC,OAAAC,eAAArC,EAAA,cAAAsC,OAAA,IDtBItC,EAAAA,WCsBWG","file":"System/Threading/NodeJSWorker.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/Worker.js\n */\ndefine([\"require\", \"exports\", \"../Observable/ObservableBase\"], function (require, exports, ObservableBase_1) {\n    \"use strict\";\n    var ps = require(\"child_process\");\n    var NodeJSWorker = (function (_super) {\n        __extends(NodeJSWorker, _super);\n        function NodeJSWorker(url) {\n            var _this = this;\n            _super.call(this);\n            var process = this._process = ps.fork(url);\n            process.on('message', function (msg) { return _this._onNext(JSON.parse(msg)); });\n            process.on('error', function (err) { return _this._onError(err); });\n        }\n        NodeJSWorker.prototype._onNext = function (data) {\n            _super.prototype._onNext.call(this, data);\n            if (this.onmessage)\n                this.onmessage({ data: data });\n        };\n        NodeJSWorker.prototype._onError = function (error) {\n            _super.prototype._onError.call(this, error);\n            if (this.onerror)\n                this.onerror(error);\n        };\n        NodeJSWorker.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._process.removeAllListeners();\n            this._process.kill();\n            this._process = null;\n        };\n        NodeJSWorker.prototype.postMessage = function (obj) {\n            this.throwIfDisposed();\n            this._process.send(JSON.stringify({ data: obj }));\n        };\n        NodeJSWorker.prototype.terminate = function () {\n            this.dispose();\n        };\n        return NodeJSWorker;\n    }(ObservableBase_1.ObservableBase));\n    exports.NodeJSWorker = NodeJSWorker;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = NodeJSWorker;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/Worker.js\r\n */\r\n\r\nimport {WorkerLike} from \"./WorkerType\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\n\r\ndeclare const require:any;\r\nconst ps = require(\"child_process\");\r\n//import {ChildProcess} from \"child_process\";\r\n\r\n/**\r\n * This class takes the place of a WebWorker\r\n */\r\nexport class NodeJSWorker extends ObservableBase<any> implements WorkerLike\r\n{\r\n\tprivate _process:any;\r\n\tonmessage:(message:{data:any})=>void;\r\n\tonerror:(error:any)=>void;\r\n\r\n\tconstructor(url:string)\r\n\t{\r\n\t\tsuper();\r\n\t\tvar process = this._process = ps.fork(url);\r\n\t\tprocess.on('message', (msg:string)=>this._onNext(JSON.parse(msg)));\r\n\t\tprocess.on('error', (err:any)=>this._onError(err));\r\n\t}\r\n\r\n\tprotected _onNext(data:any):void\r\n\t{\r\n\t\tsuper._onNext(data);\r\n\t\tif(this.onmessage)\r\n\t\t\tthis.onmessage({data: data});\r\n\r\n\t}\r\n\r\n\tprotected _onError(error:any):void\r\n\t{\r\n\t\tsuper._onError(error);\r\n\t\tif(this.onerror)\r\n\t\t\tthis.onerror(error);\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._process.removeAllListeners(); // just to satisfy paranoia.\r\n\t\tthis._process.kill();\r\n\t\tthis._process = null;\r\n\t}\r\n\r\n\tpostMessage(obj:any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._process.send(JSON.stringify({data: obj}));\r\n\t}\r\n\r\n\tterminate()\r\n\t{\r\n\t\tthis.dispose();\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeJSWorker;\r\n"]}