/*!
 * @author electricessence / https://github.com/electricessence/
 * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md
 * Based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/Worker.js
 */
!function(e){if("object"==typeof module&&"object"==typeof module.exports){var o=e(require,exports);void 0!==o&&(module.exports=o)}else"function"==typeof define&&define.amd&&define(["require","exports","../Observable/ObservableBase"],e)}(function(e,o){"use strict";var t=e("../Observable/ObservableBase"),r=e("child_process"),s=function(e){function o(o){var t=this;e.call(this);var s=this._process=r.fork(o);s.on("message",function(e){return t._onNext(JSON.parse(e))}),s.on("error",function(e){return t._onError(e)})}return __extends(o,e),o.prototype._onNext=function(o){e.prototype._onNext.call(this,o),this.onmessage&&this.onmessage({data:o})},o.prototype._onError=function(o){e.prototype._onError.call(this,o),this.onerror&&this.onerror(o)},o.prototype._onDispose=function(){e.prototype._onDispose.call(this),this._process.removeAllListeners(),this._process.kill(),this._process=null},o.prototype.postMessage=function(e){this.throwIfDisposed(),this._process.send(JSON.stringify({data:e}))},o.prototype.terminate=function(){this.dispose()},o}(t.ObservableBase);o.NodeJSWorker=s,Object.defineProperty(o,"__esModule",{value:!0}),o["default"]=s});
//# sourceMappingURL=NodeJSWorker.js.map
